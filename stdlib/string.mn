module String exposing
    ( Pattern(..)
    , all?
    , any?
    , append
    , at
    , concat
    , contains?
    , drop_right
    , drop_while
    , empty?
    , ends_with?
    , fold_left
    , fold_right
    , from_char
    , index_of
    , indexes_of
    , join
    , keep
    , last_index_of
    , lines
    , map
    , match?
    , pad
    , pad_left
    , pad_right
    , reject
    , repeat
    , replace
    , reverse
    , size
    , slice
    , split_at
    , split_on
    , starts_with?
    , take_left
    , take_right
    , take_while
    , to_float
    , to_int
    , to_lower
    , to_upper
    , trim
    , trim_left
    , trim_right
    , words
    )

type Pattern =
    Pattern(String)

## Calculate the number of characters in a string.
##
## @since 0.1.0
##
## ```
## ➢ String.size("foobar")
## 6 : Int
## ```
let size(str : String) -> Int =
    string_size(str)

## Append two strings.
##
## @since 0.1.0
##
## ```
## ➢ String.append("foo", "bar")
## "foobar" : String
## ```
let append(str1 : String, str2 : String) -> String =
    string_append(str1, str2)

## Concatenate many strings into one.
##
## @since 0.1.0
##
## ```
## ➢ String.concat(["foo", "bar"])
## "foobar" : String
## ```
let concat(list : List(String)) -> String =
    string_concat(list)

## Put many strings together with a given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.join(Pattern("/"), (["foo", "bar", "baz"])
## "foo/bar/baz" : String
## ```
let join(pattern : Pattern, list : List(String)) -> String =
    todo("not implemented")

## Take *n* characters from the left side of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.take_left("foobar", 3)
## "foo" : String
## ```
let take_left(str : String, n : Int) -> String =
    if n < 1 then
        ""
    else
        slice(str, 0, n)

## Take *n* characters from the right side of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.take_right("foobar", 3)
## "bar" : String
## ```
let take_right(str : String, n : Int) -> String =
    let len = size(str)
    if n <= 0 then
        ""
    else if n >= len then
        str
    else
        slice(str, len - n, len)

## Take characters from the start of a string as long as they satisfy the predicate.
## Returns a new string containing only the matching characters from the beginning.
##
## @since 0.1.0
##
## ```
## ➢ String.take_while("foobar", vowel?)
## : String
## ```
let take_while(str : String, predicate : (Char -> Bool)) -> String =
    todo("not implemented")
let take_while(str : String, predicate : (Char -> Bool)) -> String =
    let len = size(str)
    let find_end(i : Int) -> Int =
        if i >= len then
            len
        else
            match at(str, i) on
            | None => i
            | Some(c) =>
                if predicate(c) then
                    find_end(i + 1)
                else
                    i
    slice(str, 0, find_end(0))

## Drop *n* characters from the right side of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.drop_left("foobar", 3)
## "bar" : String
## ```
let drop_left(str : String, n : Int) -> String =
    let len = size(str)
    if n <= 0 then
        str
    else if n >= len then
        ""
    else
        slice(str, n, len)

## Drop *n* characters from the right side of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.drop_right("foobar", 3)
## "foo" : String
## ```
let drop_right(str : String, n : Int) -> String =
    let len = size(str)
    if n <= 0 then
        str
    else if n >= len then
        ""
    else
        slice(str, 0, len - n)

## Remove characters from the start of a string as long as they satisfy the predicate.
## Returns a new string excluding all matching characters from the beginning.
##
## @since 0.1.0
##
## ```
## ➢ String.drop_while("aaabbc", fn(c) => c == 'a')
## "bbc" : String
## ```
let drop_while(str : String, predicate : (Char -> Bool)) -> String =
    todo("not implemented")

## Determine if a string contains the given pattern.
## Returns True if the pattern is found anywhere within the string.
##
## @since 0.1.0
##
## ```
## ➢ String.contains?("hello world", Pattern("world"))
## True : Bool
##
## ➢ String.contains?("hello world", Pattern("moon"))
## False : Bool
## ```
let contains?(str : String, pattern : Pattern) -> Bool =
    todo("not implemented")

## Break a string into words, splitting on chunks of whitespace.
##
## @since 0.1.0
##
## ```
## ➢ String.words("hello world")
## ["hello", "world"] : List(String)
##
## ➢ String.words("  multiple   spaces   ")
## ["multiple", "spaces"] : List(String)
## ```
let words(str : String) -> List(String) =
    todo("not implemented")

## Break a string into lines, splitting on newlines.
##
## @since 0.1.0
##
## ```
## ➢ String.lines("hello\nworld")
## ["hello", "world"] : List(String)
##
## ➢ String.lines("multiple\n\nblank\nlines")
## ["multiple", "", "blank", "lines"] : List(String)
## ```
let lines(str : String) -> List(String) =
    todo("not implemented")

## Find the first occurrence of a pattern in a string.
## Returns the index of the first character where the pattern is found, or None if not present.
##
## @since 0.1.0
##
## ```
## ➢ String.index_of("hello world", Pattern("world"))
## Some(6) : Maybe(Int)
##
## ➢ String.index_of("hello world", Pattern("moon"))
## None : Maybe(Int)
## ```
let index_of(str : String, pattern : Pattern) -> Maybe(Int) =
    todo("not implemented")

## Find the last occurrence of a pattern in a string.
## Returns the index of the first character of the last match, or None if not present.
##
## @since 0.1.0
##
## ```
## ➢ String.last_index_of("hello hello world", Pattern("hello"))
## Some(6) : Maybe(Int)
##
## ➢ String.last_index_of("hello world", Pattern("moon"))
## None : Maybe(Int)
## ```
let last_index_of(str : String, pattern : Pattern) -> Maybe(Int) =
    todo("not implemented")

## Split a string using a given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.split_on("foo,bar", Pattern(","))
## ["foo", "bar"] : List(String)
## ```
let split_on(str : String, pattern : Pattern) -> List(String) =
    todo("not implemented")

## Split a string using a given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.split_at("foobar", 3)
## ("foo", "bar") : (String, String)
## ```
let split_at(str : String, n : Int) -> (String, String) =
    todo("not implemented")

## Take a substring given a start and end index.
##
## @since 0.1.0
##
## ```
## ➢ String.slice("abcd", 1, 3)
## "bc" : String
## ```
let slice(str : String, start : Int, end : Int) -> String =
    string_slice(str, start, end)

## Convert a string to all lower case.
##
## @since 0.1.0
##
## ```
## ➢ String.to_lower("FOOBAR")
## "foobar" : String
## ```
let to_lower(str : String) -> String =
    string_to_lower(str)

## Convert a string to all upper case.
##
## @since 0.1.0
##
## ```
## ➢ String.to_upper("foobar")
## "FOOBAR" : String
## ```
let to_upper(str : String) -> String =
    string_to_upper(str)

## Reverse a string.
##
## @since 0.1.0
##
## ```
## ➢ String.reverse("foobar")
## "raboof" : String
## ```
let reverse(str : String) -> String =
    string_reverse(str)

## Repeat a string *n* times.
##
## @since 0.1.0
##
## ```
## ➢ String.repeat("ha", 3)
## "hahaha" : String
## ```
let repeat(str : String, count : Int) -> String =
    todo("not implemented")

## Test whether a string is empty.
## Returns True if the string contains no characters.
##
## @since 0.1.0
##
## ```
## ➢ String.empty?("")
## True : Bool
##
## ➢ String.empty?("hello")
## False : Bool
## ```
let empty?(str : String) -> Bool =
    todo("not implemented")

## Returns `True` if string ends with the given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.ends_with?("abc", "c")
## True : Bool
## ```
let ends_with?(str : String, pattern : Pattern) =
    string_ends_with(str, pattern)

## Returns `True` if string starts with the given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.starts_with?("abc", "a")
## True : Bool
## ```
let starts_with?(str : String, pattern : Pattern) -> Bool
    string_starts_with(str, pattern)

## Replace all occurrences of some pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.replace "foo-bar-baz" (Pattern "-") (Pattern "_")
## "foo_bar_baz" : String
## ```
let replace(str: String, pattern1 : String, pattern2 : String) -> String =
    todo("not implemented")

## Remove whitespace from both sides of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.trim("  foo  ")
## "foo" : String
## ```
let trim(str : String) -> String =
    todo("not implemented")

## Remove whitespace from the left of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.trim_left("  foo")
## "foo" : String
## ```
let trim_left(str : String) -> String =
    todo("not implemented")

## Remove whitespace from the right of a string.
##
## @since 0.1.0
##
## ```
## ➢ String.trim_right("foo  ")
## "foo" : String
## ```
let trim_right(str : String) -> String =
    todo("not implemented")

## Pad a string on both sides until it has a given length.
##
## @since 0.1.0
##
## ```
## ➢ String.pad("foobar", 10, '_')
## "__foobar__" : String
## ```
let pad(str : String, n : Int, char : Char) -> String =
    todo("not implemented")

## Pad a string from the left until it has a given length.
##
## @since 0.1.0
##
## ```
## ➢ String.pad_left("foo", 6, Pattern(" "))
## "   foo" : String
## ```
let pad_left(str : String, count : Int, pattern : Pattern) -> String =
    todo("not implemented")

## Pad a string from the right until it has a given length.
##
## @since 0.1.0
##
## ```
## ➢ String.pad_right("foo", 6, Pattern(" "))
## "foo   " : String
## ```
let pad_right(str : String, count : Int, pattern : Pattern) -> String =
    todo("not implemented")

## Returns `True` if string starts with the given pattern.
##
## @since 0.1.0
##
## ```
## ➢ String.indexes_of("Mississippi", "i")
## [1, 4, 7, 10] : List(Int)
## ```
let indexes_of(str: String, substr : String) -> List(Int) =
    todo("not implemented")

## Convert a string to an integer.
## Returns `Some(value)` if the string contains a valid integer, or `None` otherwise.
##
## @since 0.1.0
##
## ```
## ➢ String.to_int("42")
## Some(42) : Maybe(Int)
##
## ➢ String.to_int("not_a_number")
## None : Maybe(Int)
## ```
let to_int(str : String) -> Maybe(Int) =
    todo("not implemented")

## Convert a string to a floating-point number.
## Returns `Some(value)` if the string contains a valid number, or `None` otherwise.
##
## @since 0.1.0
##
## ```
## ➢ String.to_float("3.14")
## Some(3.14) : Maybe(Float)
##
## ➢ String.to_float("invalid")
## None : Maybe(Float)
## ```
let to_float(str : String) -> Maybe(Float) =
    todo("not implemented")

## Convert a single character to a string.
## Returns a new string containing only the given character.
##
## @since 0.1.0
##
## ```
## ➢ String.from_char('a')
## "a" : String
##
## ➢ String.from_char('🐱')
## "🐱" : String
## ```
let from_char(char : Char) -> String =
    todo("not implemented")

## Transform every character in a string using the provided function.
## Returns a new string with each character replaced by the result of applying the function.
##
## @since 0.1.0
##
## ```
## ➢ String.map("hello", fn(c) => if c == 'e' then 'a' else c)
## "hallo" : String
## ```
let map(str : String, f : (Char -> Char)) -> String =
    todo("not implemented")

## Keep only the characters that pass the predicate test.
## Returns a new string containing just the characters for which the predicate returns `True`.
##
## @since 0.1.0
##
## ```
## ➢ String.keep("hello world", fn(c) => c != ' ')
## "helloworld" : String
## ```
let keep(str : String, predicate : (Char -> Bool)) -> String =
    todo("not implemented")

## Remove all characters that pass the predicate test.
## Returns a new string excluding the characters for which the predicate returns `True`.
##
## @since 0.1.0
##
## ```
## ➢ String.reject("hello world", fn(c) => c == 'l')
## "heo word" : String
## ```
let reject(str : String, predicate : (Char -> Bool)) -> String =
    todo("not implemented")

## Reduce a string from the left, accumulating a value by applying a function to each character.
## The function takes the accumulated value and current character, returning a new accumulated value.
##
## @since 0.1.0
##
## ```
## ➢ String.fold_left("abc", 0, fn(acc, c) => acc + Char.to_code(c))
## 294 : Int  # Sum of character codes for 'a', 'b', and 'c'
## ```
let fold_left(str : String, f : (Char, b -> b), init : b) -> b =
    todo("not implemented")

## Reduce a string from the right, accumulating a value by applying a function to each character.
## The function takes the current character and accumulated value, returning a new accumulated value.
##
## @since 0.1.0
##
## ```
## ➢ String.fold_right("abc", "", fn(c, acc) => String.append(acc, String.from_char(c)))
## "cba" : String  # Characters in reverse order
## ```
let fold_right(str : String, f : (Char, b -> b), init : b) -> b =
    todo("not implemented")

## Determine whether any character in the string satisfies the predicate.
## Returns `True` if at least one character passes the test.
##
## @since 0.1.0
##
## ```
## ➢ String.any?("hello", fn(c) => c == 'x')
## False : Bool
##
## ➢ String.any?("hello", fn(c) => c == 'e')
## True : Bool
## ```
let any?(str : String, pred : (Char -> Bool)) -> Bool =
    todo("not implemented")

## Determine whether all characters in the string satisfy the predicate.
## Returns `True` only if every character passes the test.
##
## @since 0.1.0
##
## ```
## ➢ String.all?("12345", fn(c) => Char.is_digit(c))
## True : Bool
##
## ➢ String.all?("123a5", fn(c) => Char.is_digit(c))
## False : Bool
## ```
let all?(str : String, pred : (Char -> Bool)) -> Bool =
    todo("not implemented")

## Get character at the given position.
## Returns `Some(char)` if position is valid, or `None` if out of bounds.
##
## @since 0.1.0
##
## ```
## ➢ String.at("hello", 1)
## Some('e') : Maybe(Char)
##
## ➢ String.at("hello", 10)
## None : Maybe(Char)
## ```
let at(str : String, position : Int) -> Maybe(Char) =
    string_at(str, position)

## Determines if a string exactly matches the given pattern.
## Returns `True` only for a complete match.
##
## @since 0.1.0
##
## ```
## ➢ String.match?("hello", Pattern("hello"))
## True : Bool
##
## ➢ String.match?("hello world", Pattern("hello"))
## False : Bool
## ```
let match?(str : String, pattern : Pattern) -> Bool =
    todo("not implemented")

foreign string_size(_ : String) -> Int =
    "zig_string_size"

foreign string_append(_ : String, _ : String) -> String =
    "zig_string_append"

foreign string_concat(_ : List(String)) -> String =
    "zig_string_concat"

foreign string_slice(_ : String, _ : Int, _ : Int) -> String =
    "zig_string_slice"

foreign string_to_lower(_ : String) -> String =
    "zig_string_to_lower"

foreign string_to_upper(_ : String) -> String =
    "zig_string_to_upper"

foreign string_at(_ : String, _ : Int) -> Int =
    "zig_string_at"

foreign string_empty(_ : String) -> Bool =
    "zig_string_empty"

foreign string_reverse(_ : String) -> String =
    "zig_string_reverse"

foreign string_starts_with(_ : String, _ : String) -> Bool =
    "zig_string_starts_with"

foreign string_ends_with(_ : String, _ : String) -> Bool =
    "zig_string_ends_with"
