module Date exposing
    ( Date
    , Month(..)
    , and_then
    , map
    , mk_date
    , today
    )

type Date = Date
    { month : Month
    , day : Int
    , year : Int
    }

type Month =
    | January
    | February
    | March
    | April
    | May
    | June
    | July
    | August
    | September
    | October
    | November
    | December

let mk_date (month : Month) (day : Int) (year : Int) : Date =
    Date { month, day, year }

let today : Eff Unit Date =
    date_today

let map (f : Date -> Date) (date : Date) : Date =
    f date

let and_then (f : Date -> Maybe Date) (mdate : Maybe Date) : Maybe Date =
    Maybe.map f mdate

foreign date_today : Eff Unit Date =
    "zig_date_today"
