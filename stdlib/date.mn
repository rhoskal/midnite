module Date exposing
    ( Date
    , Month(..)
    , and_then
    , map
    , mk_date
    , today
    )

    type Date = Date
        { month : Month
        , day : Int
        , year : Int
        }

    type Month =
        | January
        | February
        | March
        | April
        | May
        | June
        | July
        | August
        | September
        | October
        | November
        | December

    let mk_date(month : Month, day : Int, year : Int) -> Date =
        Date({ month, day, year })

    let today() -> Eff () Date =
        todo("not implemented")

    let map(f : (Date -> Date)), date : Date) -> Date =
        f(date)

    let and_then(mdate : Maybe(Date), f : (Date -> Maybe(Date))) -> Maybe(Date)
        Maybe.map(mdate, f)
end
