module Float exposing
    ( Degrees
    , Radians
    , abs
    , acos
    , acosech
    , acosh
    , acoth
    , asech
    , asin
    , asinh
    , atan
    , atan2
    , atanh
    , ceil
    , clamp
    , cos
    , cosech
    , cosh
    , e
    , floor
    , from_int
    , log
    , log10
    , log2
    , max
    , min
    , mod
    , negate
    , pi
    , pow
    , round
    , sech
    , sin
    , sinh
    , sqrt
    , tan
    , tanh
    , to_degrees
    , to_radians
    , trunc
    )

type alias Radians =
    Float

type alias Degrees =
    Float

## Get the absolute value of a number.
##
## @since 0.1.0
##
## ```
## ➢ Float.abs(-42.0)
## 42.0 : Float
## ```
let abs(x : Float) -> Float =
    if x < 0 then
        -x
    else
        x

## Calculates the value of *x* to the power of *y*.
##
## @since 0.1.0
##
## ```
## ➢ Float.pow(9.0, 3.0)
## 729.0 : Float
## ```
let pow(x : Float, y : Float) -> Float =
    float_pow(x, y)

## Integer remainder.
##
## @since 0.1.0
##
## ```
## ➢ Float.mod(42, 8)
## 2 : Int
## ```
let mod(x : Float, y : Float) -> Float =
    float_mod(x, y)

## Clamps a number within a given range.
##
## @since 0.1.0
##
## ```
## ➢ Float.clamp(100.0, 200.0, 99.0)
## 100.0 : Float
## ```
let clamp(low : Float, high : Float, n : Float) -> Float =
    if n < low then
        low
    else
        if n > high then
            high
        else
            n

## Negate a number.
##
## @since 0.1.0
##
## ```
## ➢ Float.negate(42.0)
## -42.0 : Float
## ```
let negate(x : Float) -> Float =
    -x

## Calculate the square root of a number.
##
## @since 0.1.0
##
## ```
## ➢ Float.sqrt(16.0)
## 4.0 : Float
## ```
let sqrt(x : Float) -> Float =
    float_sqrt(x)

## Calculate the logarithm of a number with a given base.
##
## @since 0.1.0
##
## ```
## ➢ Float.log(2.0, 256.0)
## 8.0 : Float
## ```
let log(x : Float, y : Float) -> Float =
    float_log(x, y)

## Calculate the base-2 logarithm of a number.
## Undefined for inputs <= 0.
##
## @since 0.1.0
##
## ```
## ➢ Float.log2(8.0)
## 3.0 : Float
## ```
let log2(x : Float) -> Float =
    float_log(2, x)

## Calculate the base-10 logarithm of a number.
## Undefined for inputs <= 0.
##
## @since 0.1.0
##
## ```
## ➢ Float.log10(1000.0)
## 3.0 : Float
## ```
let log10(x : Float) -> Float =
    float_log(10, x)

## An approximation of *e*.
##
## @since 0.1.0
##
## ```
## ➢ Float.e()
## 3.141592653589793 : Float
## ```
let e() -> Float =
    float_e()

## An approximation of pie.
##
## @since 0.1.0
##
## ```
## ➢ Float.pi()
## 3.141592653589793 : Float
## ```
let pi() -> Float =
    float_pi()

## ```
## Calculate the cosine of an angle in radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.cos(Float.pi)
## -1.0 : Float
## ```
let cos(x : Radians) -> Float =
    float_cos(x)

## Calculate the sine of an angle in radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.sin(Float.pi / 2)
## 1.0 : Float
## ```
let sin(x : Radians) -> Float =
    float_sin(x)

## Calculate the tangent of an angle in radians.
## Note: Undefined at odd multiples of π/2.
##
## @since 0.1.0
##
## ```
## ➢ Float.tan(Float.pi / 4)
## 1.0 : Float
## ```
let tan(x : Radians) -> Float =
    float_tan(x)

## Calculate the arc cosine (inverse cosine) of a value.
## Returns an angle in radians in the range [0, π].
## Only defined for inputs in the range [-1, 1].
##
## @since 0.1.0
##
## ```
## ➢ Float.acos(0.0)
## 1.5707963267948966 : Radians  # π/2
## ```
let acos(x : Float) -> Radians =
    float_acos(x)

## Calculate the arc sine (inverse sine) of a value.
## Returns an angle in radians in the range [-π/2, π/2].
## Only defined for inputs in the range [-1, 1].
##
## @since 0.1.0
##
## ```
## ➢ Float.asin(1.0)
## 1.5707963267948966 : Radians  # π/2
## ```
let asin(x : Float) -> Radians =
    float_asin(x)

## Calculate the arc tangent (inverse tangent) of a value.
## Returns an angle in radians in the range [-π/2, π/2].
##
## @since 0.1.0
##
## ```
## ➢ Float.atan(1.0)
## 0.7853981633974483 : Radians  # π/4
## ```
let atan(x : Float) -> Radians =
    float_atan(x)

## Calculate the angle (in radians) from the positive x-axis to the
## point (x, y), handling all quadrants correctly.
## Returns an angle in radians in the range [-π, π].
##
## @since 0.1.0
##
## ```
## ➢ Float.atan2(1.0, 1.0)
## 0.7853981633974483 : Radians  # π/4
## ```
let atan2(x : Float, y : Float) -> Radians =
    float_atan2(x, y)

## Converts a degree value into radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.radians(Float.pi)
## 3.141592653589793 : Float
## ```
let to_radians(deg : Degrees) -> Radians =
    (deg *. pi) /. 180.0

## Converts an angle from radians to degrees.
##
## @since 0.1.0
##
## ```
## ➢ Float.degrees(180.0)
## 3.141592653589793 : Float
## ```
let to_degrees(rad : Radians) -> Degrees =
    (rad *. 180.0) /. pi

## Truncate a number, rounding towards zero.
##
## @since 0.1.0
##
## ```
## ➢ Float.trunc(-99.29)
## -99 : Int
## ```
let trunc(x : Float) -> Int =
    float_trunc(x)

## Rounds a number up to the nearest integer.
##
## @since 0.1.0
##
## ```
## ➢ Float.ceil(1.4)
## 2 : Int
## ```
let ceil(x : Float) -> Int =
    float_ceil(x)

## Rounds a number down to the nearest integer.
##
## @since 0.1.0
##
## ```
## ➢ Float.floor(1.2)
## 1 : Int
## ```
let floor(x : Float) -> Int =
    float_floor(x)

## Round a number to the nearest integer.
##
## @since 0.1.0
##
## ```
## ➢ Float.round(1.2)
## 1 : Int
##
## ➢ Float.round(1.5)
## 2 : Int
## ```
let round(x : Float) -> Int =
    float_round(x)

## Calculate the hyperbolic cosine of an angle in radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.cosh(1.0)
## 1.5430806348152437 : Float
## ```
let cosh(x : Radians) -> Float =
    float_cosh(x)

## Calculate the hyperbolic sine of an angle in radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.sinh(1.0)
## 1.1752011936438014 : Float
## ```
let sinh(x : Radians) -> Float =
    float_sinh(x)

## Calculate the hyperbolic tangent of an angle in radians.
## Returns values in the range [-1, 1].
##
## @since 0.1.0
##
## ```
## ➢ Float.tanh(1.0)
## 0.7615941559557649 : Float
## ```
let tanh(x : Radians) -> Float =
    float_tanh(x)

## Calculate the hyperbolic cotangent of an angle in radians.
## Undefined at x = 0.
##
## @since 0.1.0
##
## ```
## ➢ Float.coth(1.0)
## 1.3130352854993315 : Float
## ```
let coth(x : Radians) -> Float =
    float_coth(x)

## Calculate the hyperbolic secant of an angle in radians.
##
## @since 0.1.0
##
## ```
## ➢ Float.sech(1.0)
## 0.6480542736638854 : Float
## ```
let sech(x : Radians) -> Float =
    float_sech(x)

## Calculate the hyperbolic cosecant of an angle in radians.
## Undefined at x = 0.
##
## @since 0.1.0
##
## ```
## ➢ Float.cosech(1.0)
## 0.8509181282393216 : Float
## ```
let cosech(x : Radians) -> Float =
    float_cosech(x)

## Calculate the inverse hyperbolic cosine.
## Only defined for inputs >= 1.
##
## @since 0.1.0
##
## ```
## ➢ Float.acosh(1.0)
## 0.0 : Float
## ```
let acosh(x : Float) -> Float =
    float_acosh(x)

## Calculate the inverse hyperbolic sine.
##
## @since 0.1.0
##
## ```
## ➢ Float.asinh(1.0)
## 0.8813735870195429 : Float
## ```
let asinh(x : Float) -> Float =
    float_asinh(x)

## Calculate the inverse hyperbolic tangent.
## Only defined for inputs in range (-1, 1).
##
## @since 0.1.0
##
## ```
## ➢ Float.atanh(0.5)
## 0.5493061443340549 : Float
## ```
let atanh(x : Float) -> Float =
    float_atanh(x)

## Calculate the inverse hyperbolic cotangent.
## Undefined for inputs in range [-1, 1].
##
## @since 0.1.0
##
## ```
## ➢ Float.acoth(2.0)
## 0.5493061443340549 : Float
## ```
let acoth(x : Float) -> Float =
    float_acoth(x)

## Calculate the inverse hyperbolic secant.
## Only defined for inputs in range (0, 1].
##
## @since 0.1.0
##
## ```
## ➢ Float.asech(0.5)
## 1.3169578969248166 : Float
## ```
let asech(x : Float) -> Float =
    float_asech(x)

## Calculate the inverse hyperbolic cosecant.
## Undefined at x = 0.
##
## @since 0.1.0
##
## ```
## ➢ Float.acosech(1.0)
## 0.8813735870195429 : Float
## ```
let acosech(x : Float) -> Float =
    float_acosech(x)

## Return the minimum positive, non-zero representable floating-point value.
##
## @since 0.1.0
##
## ```
## ➢ Float.min()
## 5e-324 : Float
## ```
let min() -> Float =
    float_min()

## Return the maximum representable finite floating-point value.
##
## @since 0.1.0
##
## ```
## ➢ Float.max()
## 1.7976931348623157e+308 : Float
## ```
let max() -> Float =
    float_max()

## Convert an integer to a floating-point number.
##
## @since 0.1.0
##
## ```
## ➢ Float.from_int(42)
## 42.0 : Float
## ```
let from_int(x : Int) -> Float =
    float_from_int(x)

foreign float_pow(_ : Float, _ : Float) -> Float =
    "zig_float_pow"

foreign float_mod(_ : Float, _ : Float) -> Float =
    "zig_float_mod"

foreign float_sqrt(_ : Float) -> Float =
    "zig_float_sqrt"

foreign float_log(_ : Float, _ : Float) -> Float =
    "zig_float_log"

foreign float_e() -> Float =
    "zig_float_e"

foreign float_pi() -> Float =
    "zig_float_pi"

foreign float_cos(_ : Float) -> Float =
    "zig_float_cos"

foreign float_sin(_ : Float) -> Float =
    "zig_float_sin"

foreign float_tan(_ : Float) -> Float =
    "zig_float_tan"

foreign float_acos(_ : Float) -> Float =
    "zig_float_acos"

foreign float_asin(_ : Float) -> Float =
    "zig_float_asin"

foreign float_atan(_ : Float) -> Float =
    "zig_float_atan"

foreign float_atan2(_ : Float, _ : Float) -> Float =
    "zig_float_atan2"

foreign float_trunc(_ : Float) -> Int =
    "zig_float_trunc"

foreign float_ceil(_ : Float) -> Int =
    "zig_float_ceil"

foreign float_floor(_ : Float) -> Int =
    "zig_float_floor"

foreign float_round(_ : Float) -> Int =
    "zig_float_round"

foreign float_cosh(_ : Float) -> Float =
    "zig_float_cosh"

foreign float_sinh(_ : Float) -> Float =
    "zig_float_sinh"

foreign float_tanh(_ : Float) -> Float =
    "zig_float_tanh"

foreign float_coth(_ : Float) -> Float =
    "zig_float_coth"

foreign float_sech(_ : Float) -> Float =
    "zig_float_sech"

foreign float_cosech(_ : Float) -> Float =
    "zig_float_cosech"

foreign float_acosh(_ : Float) -> Float =
    "zig_float_acosh"

foreign float_asinh(_ : Float) -> Float =
    "zig_float_asinh"

foreign float_atanh(_ : Float) -> Float =
    "zig_float_atanh"

foreign float_acoth(_ : Float) -> Float =
    "zig_float_acoth"

foreign float_asech(_ : Float) -> Float =
    "zig_float_asech"

foreign float_acosech(_ : Float) -> Float =
    "zig_float_acosech"

foreign float_min() -> Float =
    "zig_float_min"

foreign float_max() -> Float =
    "zig_float_max"

foreign float_from_int(_ : Int) -> Float =
    "zig_float_from_int"
