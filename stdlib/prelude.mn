module Prelude exposing
    ( abs
    , always
    , even?
    , flip
    , gcd
    , identity
    , lcm
    , max
    , min
    , negate
    , odd?
    , pow
    )

include Boolean
include Compareable

## Returns the input value unchanged.
##
## @since 0.1.0
##
## ```
## ➢ identity 42
## 42 : Int
## ```
let identity (x : a) : a =
    x

## Returns the first parameter and ignores the second. Useful in higher-order
## functions where you need a function that returns a constant value.
##
## @since 0.1.0
##
## ```
## ➢ always 42 0
## 42 : Int
## ```
let always (x : a) (_ : b) : a =
    x

## Flips the order of the first two arguments to a function.
##
## @since 0.1.0
##
## ```
## ➢ divide 10 5
## 2 : Float
##
## ➢ flip divide 5 10
## 2 : Float
## ```
let flip : (f : a -> b -> c) (x : b) (y : a) : c =
    f y x

## Calculates the addition of two integers.
##
## @since 0.1.0
##
## ```
## ➢ add 40 2
## 42 : Int
## ```
let add (x : Int) (y : Int) : Int =
    int_add x y

## Calculates the subtraction of two integers.
##
## @since 0.1.0
##
## ```
## ➢ sub 44 2
## 42 : Int
## ```
let sub (x : Int) (y : Int) : Int =
    int_sub x y

## Calculates the multiplication of two integers.
##
## @since 0.1.0
##
## ```
## ➢ mul 2 21
## 42 : Int
## ```
let mul (x : Int) (y : Int) : Int =
    int_mul x y

## Calculates the division of two integers.
##
## @since 0.1.0
##
## ```
## ➢ div 2 84
## 42 : Int
## ```
let div (x : Int) (y : Int) : Int =
    int_div x y

## Determines if a number is even.
##
## @since 0.1.0
##
## ```
## ➢ even? 4
## True : Bool
## ```
let even? (n : Int) : Bool =
    (mod n 2) == 0

## Determines if a number is odd.
##
## @since 0.1.0
##
## ```
## ➢ odd? 3
## True : Bool
## ```
let odd? (n : Int) : Bool =
    (mod n 2) /= 0

## Returns the greatest common divisor of the two integers.
##
## @since 0.1.0
##
## ```
## ➢ gcd 8 12
## 4 : Int
## ```
let gcd (a : Int) (b : Int) : Int =
    if b == 0 then
        a
    else
        gcd b (mod a b)

## Determines the smallest positive integer that is divisible by both *a* and *b*
##
## @since 0.1.0
##
## ```
## ➢ lcm 21 6
## 42 : Int
## ```
let lcm (a : Int) (b : Int) : Int =
    abs (a * b) / (gcd a b)

## Calculates the value of *a* to the power of *b*.
##
## @since 0.1.0
##
## ```
## ➢ pow 9 3
## 729 : Int
## ```
let pow (x : Int) (y : Int) : Int =
    int_pow x y

## Integer remainder.
##
## @since 0.1.0
##
## ```
## ➢ mod 42 8
## 2 : Int
## ```
let mod (a : Int) (b : Int) : Int =
    a - b * (a / b)

## Negate a number.
##
## @since 0.1.0
##
## ```
## ➢ negate 42
## -42 : Int
## ```
let negate (n : Int) : Int =
    -n

## Get the absolute value of a number.
##
## @since 0.1.0
##
## ```
## ➢ abs -42
## 42 : Int
## ```
let abs (n : Int) : Int =
    if x < 0 then
        -n
    else
        n

## Clamps a number within a given range.
##
## @since 0.1.0
##
## ```
## ➢ clamp 100 200 99
## 100 : Int
## ```
let clamp (low : Int) (high : Int) (n : Int) : Int =
    if n < low then
        low
    else if n > high then
        high
    else
        n

let max : Int =
    int_max

let min : Int =
    int_min

foreign int_add : Int -> Int -> Int =
    "zig_int_add"

foreign int_sub : Int -> Int -> Int =
    "zig_int_sub"

foreign int_mul : Int -> Int -> Int =
    "zig_int_mul"

foreign int_div : Int -> Int -> Int =
    "zig_int_div"

foreign int_pow : Int -> Int -> Int =
    "zig_int_pow"

foreign int_min : Int -> Int -> Int =
    "zig_int_min"

foreign int_max : Int -> Int -> Int =
    "zig_int_max"
