module Bitwise exposing
  ( and
  , distance
  , hamming_weight
  , logical_shift_right
  , not
  , or
  , rotate_left
  , rotate_right
  , shift_left
  , shift_right
  , xor
  )

  foreign bitwise_and : Int -> Int -> Int = "zig_bitwise_and"
  foreign bitwise_or : Int -> Int -> Int = "zig_bitwise_or"
  foreign bitwise_not : Int -> Int = "zig_bitwise_not"
  foreign bitwise_xor : Int -> Int -> Int = "zig_bitwise_xor"
  foreign bitwise_shl : Int -> Int -> Int = "zig_bitwise_shl"
  foreign bitwise_shr : Int -> Int -> Int = "zig_bitwise_shr"
  foreign bitwise_lshr : Int -> Int -> Int = "zig_bitwise_lshr"
  foreign bitwise_rotl : Int -> Int -> Int = "zig_bitwise_rotl"
  foreign bitwise_rotr : Int -> Int -> Int = "zig_bitwise_rotr"
  foreign bitwise_hw : Int -> Int = "zig_bitwise_hamming_weight"
  foreign bitwise_dist : Int -> Int -> Int = "zig_bitwise_distance"

  ## Performs a bitwise AND operation between two integers.
  ## Each bit in the result is 1 only if the corresponding
  ## bits in both operands are 1.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.and 9 3
  ## 1 : Int
  ## ```
  let and : Int -> Int -> Int = bitwise_and

  ## Performs a bitwise OR operation between two integers.
  ## Each bit in the result is 1 if at least one of the corresponding
  ## bits in either operand is 1.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.or 9 3
  ## 11 : Int
  ## ```
  let or : Int -> Int -> Int = bitwise_or

  ## Performs a bitwise NOT operation on an integer, inverting all bits.
  ## Each 0 becomes 1 and each 1 becomes 0 in the binary representation.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.not 2
  ## -3 : Int
  ## ```
  let not : Int -> Int = bitwise_not

  ## Performs a bitwise XOR (exclusive OR) operation between two integers.
  ## Each bit in the result is 1 only if the corresponding bits in the
  ## operands are different.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.xor 9 3
  ## 10 : Int
  ## ```
  let xor : Int -> Int -> Int = bitwise_xor

  ## Shifts all bits in the first integer to the left by the number of
  ## positions specified by the second integer. New bits are filled with zeros.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.shift_left 1 2
  ## 4 : Int
  ## ```
  let shift_left : Int -> Int -> Int = bitwise_shl

  ## Performs an arithmetic right shift, preserving the sign bit. All
  ## bits are shifted right by the specified number of positions, with
  ## the sign bit being copied into the newly vacated bit positions.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.shift_right 1 2
  ## 0 : Int
  ## ```
  let shift_right : Int -> Int -> Int = bitwise_shr

  ## Performs a logical right shift, filling new bits with zeros
  ## regardless of the sign bit. This differs from `shift_right` in how
  ## it handles negative numbers.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.logical_shift_right 1 32
  ## 16 : Int
  ## ```
  let logical_shift_right : Int -> Int -> Int = bitwise_lshr

  ## Rotates all bits to the left by the specified number of positions.
  ## Unlike shifting, bits that would be shifted out are wrapped around
  ## to the rightmost positions.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.rotate_left 11 2
  ## 14 : Int
  ## ```
  let rotate_left : Int -> Int -> Int = bitwise_rotl

  ## Rotates all bits to the right by the specified number of positions.
  ## Unlike shifting, bits that would be shifted out are wrapped around
  ## to the leftmost positions.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.rotate_right 11 2
  ## 14 : Int
  ## ```
  let rotate_right : Int -> Int -> Int = bitwise_rotr

  ## Returns the Hamming weight (population count) of an integer - the
  ## number of 1s in its binary representation.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.hamming_weight 29
  ## 4 : Int
  ## ```
  let hamming_weight : Int -> Int = bitwise_hw

  ## Calculates the Hamming distance between two integers - the number of
  ## positions at which their binary representations differ.
  ##
  ## @since 0.1.0
  ##
  ## ```
  ## ➢ Bitwise.distance 29 21
  ## 1 : Int
  ## ```
  let distance : Int -> Int -> Int = bitwise_dist
end
