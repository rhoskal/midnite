module Boolean exposing
    ( Bool(..)
    , and
    , nand
    , nor
    , not
    , or
    , xor
    )

    ## The `Bool` type represents binary true/false values used for logical operations.
    type Bool =
        | False
        | True

    ## Negates a boolean value.
    ## Returns `True` for `False` input and `False` for `True` input.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.not(True)
    ## False : Bool
    ## ```
    let not(x : Bool) -> Bool =
        match x on
        | False => True
        | True => False

    ## Returns `True` only if both inputs are `True`.
    ## Classic logical AND operation from boolean algebra.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.and(True, False)
    ## False : Bool
    ##
    ## ➢ Boolean.and(True, True)
    ## True : Bool
    ## ```
    let and(x : Bool, y : Bool) -> Bool =
        match (x, y) on
        | (True, True) => True
        | _ => False

    ## Returns `False` only if both inputs are `True`.
    ## Equivalent to negating the AND of both inputs.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.nand(True, False)
    ## True : Bool
    ##
    ## ➢ Boolean.nand(True, True)
    ## False : Bool
    ## ```
    let nand(x : Bool, y : Bool) -> Bool =
        not(and(x, y))

    ## Returns `True` if either input is `True`.
    ## Classic logical OR operation from boolean algebra.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.or(True, False)
    ## True : Bool
    ##
    ## ➢ Boolean.or(False, False)
    ## False : Bool
    ## ```
    let or(x : Bool, y : Bool) -> Bool =
        match (x, y) on
        | (False, False) => False
        | _ => True

    ## Returns `True` only if both inputs are `False`.
    ## Equivalent to negating the OR of both inputs.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.nor(False, False)
    ## True : Bool
    ##
    ## ➢ Boolean.nor(True, False)
    ## False : Bool
    ## ```
    let nor(x : Bool, y : Bool) -> Bool =
        not(or(x, y))

    ## Returns `True` if exactly one input is `True`.
    ## Also known as "exclusive or" - `True` when inputs differ.
    ##
    ## @since 0.1.0
    ##
    ## ```
    ## ➢ Boolean.xor(True, False)
    ## True : Bool
    ##
    ## ➢ Boolean.xor(True, True)
    ## False : Bool
    ## ```
    let xor(x : Bool, y : Bool) -> Bool =
        match (x, y) on
        | (False, False) => False
        | (True, True) => False
        | _ => True
end
