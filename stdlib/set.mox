module Set exposing
    ( Set
    , diff
    , empty
    , empty?
    , fold_left
    , fold_right
    , from_list
    , insert
    , intersect
    , keep
    , map
    , member
    , parition
    , reject
    , remove
    , singleton
    , size
    , to_list
    , union
    )

    ## A collection of unique values without any particular order.
    type Set(a) =
        ...

    ## Create an empty set.
    let empty() -> Set(a) =
        todo("not implemented")

    ## Determine if a set is empty.
    let empty?(set : Set(a)) -> Bool =
        todo("not implemented")

    ## Create a set with one value.
    let singleton(value : comparable) -> Set(comparable) =
        todo("not implemented")

    ## Insert a value into a set.
    let insert(set : Set(comparable), value : comparable) -> Set(comparable) =
        todo("not implemented")

    ## Remove a value from a set. If the value is not found, no changes are made.
    let remove(set : Set(comparable), value : comparable) -> Set(comparable) =
        todo("not implemented")

    ## Determine if a value is in a set.
    let member?(set : Set(comparable), value : comparable) -> Bool =
        todo("not implemented")

    ## Determine the number of elements in a set.
    let size(set : Set(a)) -> Int =
        todo("not implemented")

    ## Get the union of two sets. Keep all values.
    let union(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
        todo("not implemented")

    ## Get the intersection of two sets. Keeps values that appear in both sets.
    let intersect(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
        todo("not implemented")

    ## Get the difference between the first set and the second. Keeps values
    that do not appear in the second set.
    let diff(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
        todo("not implemented")

    ## Convert a set into a list, sorted from lowest to highest.
    let to_list(set : Set(a)) -> List(a) =
        todo("not implemented")

    ## Convert a list into a set, removing any duplicates.
    let from_list(list : List(comparable)) -> Set(comparable) =
        todo("not implemented")

    ## Fold over the values in a set, in order from lowest to highest.
    let fold_left(set : Set(a), f : (a, b -> b), init : b) -> b =
        todo("not implemented")

    ## Fold over the values in a set, in order from highest to lowest.
    let fold_right(set : Set(a), f : (a, b -> b), init : b) -> b =
        todo("not implemented")

    ## Map a function onto a set, creating a new set with no duplicates.
    let map(set : Set(comparable), f : (comparable -> comparable2)) -> Set(comparable2) =
        todo("not implemented")

    ## Only keep elements that satisfy the given predicate
    let keep(set : Set(comparable), pred : (comparable -> Bool)) -> Set(comparable) =
        todo("not implemented")

    # Returns a set by excluding the elements which satisfy the given predicate
    let reject(set : Set(comparable), pred : (comparable -> Bool)) -> Set(comparable) =
        todo("not implemented")

    ## Create two new sets. The first contains all the elements that passed the
    ## given test, and the second contains all the elements that did not.
    let partition(set : Set(comparable), pred : (comparable -> Bool)) -> (Set(comparable), Set(comparable)) =
        todo("not implemented")
end
