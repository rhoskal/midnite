module NonEmpty where
  ( NonEmpty
  , drop_left
  , drop_while
  , from_list
  , head
  , intersperse
  , map
  , repeate
  , reverse
  , singleton
  , size
  , sort
  , tail
  , take_left
  , take_while
  , to_list
  )

  type NonEmpty a =
    | [a]
    | a :: List a

  let singleton : a -> NonEmpty a =
    \x =>
      todo "not implemented"

  let head : NonEmpty a -> a =
    \list =>
      todo "not implemented"

  let tail : NonEmpty a -> a =
    \list =>
      todo "not implemented"

  let map : (a -> b) -> NonEmpty a -> NonEmpty b =
    \f list =>
      todo "not implemented"

  let intersperse : a -> NonEmpty a -> NonEmpty a =
    \x list =>
      todo "not implemented"

  let size : NonEmpty a -> Int =
    \list =>
      todo "not implemented"

  let sort : NonEmpty comparable -> NonEmpty comparable =
    \list =>
      todo "not implemented"

  let reverse : NonEmpty a -> NonEmpty a =
    \list =>
      todo "not implemented"

  let repeat : a -> NonEmpty a =
    \x =>
      todo "not implemented"

  let take_left : Int -> NonEmpty a -> [a] =
    \n list =>
      todo "not implemented"

  let drop_left : Int -> NonEmpty a -> [a] =
    \n list =>
      todo "not implemented"

  let take_while : (a -> Bool) -> NonEmpty a -> [a] =
    \predicate list =>
      todo "not implemented"

  let drop_while : (a -> Bool) -> NonEmpty a -> [a] =
    \predicate list =>
      todo "not implemented"

  let from_list : [a] -> Maybe (NonEmpty a) =
    \list =>
      todo "not implemented"

  let to_list : NonEmpty a -> [a] =
    \list =>
      todo "not implemented"
end
