module Comparable exposing
    ( Ordering(..)
    , compare
    , eq
    , gt
    , gte
    , lt
    , lte
    , max
    , min
    , neq
    )

    type Ordering =
        | EQ
        | LT
        | GT

    let eq(x : Bool, y : Bool) -> Bool =
        if x == True && y == True then
            True
        else
            False

    let neq(x : Bool, y : Bool) -> Bool =
        not(eq(x, y))

    let lt(x : comparable, y : comparable) -> Bool =
        todo("not implemented")

    let gt(x : comparable, y : comparable) -> Bool =
        todo("not implemented")

    let lte(x : comparable, y : comparable) -> Bool =
        todo("not implemented")

    let gte(x : comparable, y : comparable) -> Bool =
        todo("not implemented")

    let compare(x : comparable, y : comparable) -> Ordering =
        if x == y then
            EQ
        else
            if x < y then
                LT
            else
                GT

    let min(x : comparable, y : comparable) -> comparable =
        if lt(x, y) then
            x
        else
            y

    let max(x : comparable, y : comparable) -> comparable =
        if gt(x, y) then
            x
        else
            y
end
