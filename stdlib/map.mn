module Map exposing
    ( Map
    , diff
    , empty
    , empty?
    , fold_left
    , fold_right
    , from_list
    , get
    , insert
    , intersect
    , keys
    , keep
    , map
    , member?
    , partition
    , reject
    , remove
    , singleton
    , size
    , to_list
    , union
    , update
    , values
    )

open TreeMap as TM

## A mapping from keys to values, optimized for lookup, insertion, and deletion.
## Keys must be comparable.
##
## @since 0.1.0
type Map(k, v) =
    Map(TM.TreeMap(k, v))

## Create an empty map.
##
## @since 0.1.0
##
## ```
## ➢ Map.empty()
## {} : Map(k, v)
## ```
let empty() -> Map(k, v) =
    Map(TM.empty())

## Determine if a map is empty.
##
## @since 0.1.0
##
## ```
## ➢ Map.empty?(Map.empty())
## True : Bool
##
## ➢ Map.empty?(Map.singleton(1, "one"))
## False : Bool
## ```
let empty?(map : Map(k, v)) -> Bool =
    match map on
    | Map(tree) => TM.empty?(tree)

## Create a map with a single key-value pair.
##
## @since 0.1.0
##
## ```
## ➢ Map.singleton(1, "one")
## {1: "one"} : Map(Int, String)
## ```
let singleton(key : comparable, value : v) -> Map(comparable, v) =
    Map(TM.singleton(key, value))

## Get the value associated with a key.
## Returns `None` if the key is not found.
##
## @since 0.1.0
##
## ```
## ➢ Map.get(Map.singleton(1, "one"), 1)
## Some("one") : Maybe(String)
##
## ➢ Map.get(Map.singleton(1, "one"), 2)
## None : Maybe(String)
## ```
let get(map : Map(comparable, v), key : comparable) -> Maybe(v) =
    match map on
    | Map(tree) => TM.get(tree, key)

## Determine if a map contains a key.
##
## @since 0.1.0
##
## ```
## ➢ Map.member?(Map.singleton(1, "one"), 1)
## True : Bool
##
## ➢ Map.member?(Map.singleton(1, "one"), 2)
## False : Bool
## ```
let member?(map : Map(comparable, v), key : comparable) -> Bool =
    match get(map, key) on
    | None => False
    | Some(_) => True

## Insert a key-value pair into a map.
## If the key already exists, the value is updated.
##
## @since 0.1.0
##
## ```
## ➢ Map.insert(Map.singleton(1, "one"), 2, "two")
## {1: "one", 2: "two"} : Map(Int, String)
##
## ➢ Map.insert(Map.singleton(1, "one"), 1, "ONE")
## {1: "ONE"} : Map(Int, String)
## ```
let insert(map : Map(comparable, v), key : comparable, value : v) -> Map(comparable, v) =
    match map on
    | Map(tree) => Map(TM.insert(tree, key, value))

## Update the value at a specific key using the given function.
## If the key does not exist, the map is not modified.
##
## @since 0.1.0
##
## ```
## ➢ Map.update(Map.singleton(1, "one"), 1, String.to_upper)
## {1: "ONE"} : Map(Int, String)
##
## ➢ Map.update(Map.singleton(1, "one"), 2, String.to_upper)
## {1: "one"} : Map(Int, String)
## ```
let update(map : Map(comparable, v), key : comparable, f : (v -> v)) -> Map(comparable, v) =
    match map on
    | Map(tree) =>
        match get(map, key) on
        | None => map
        | Some(value) => Map(TM.insert(tree, key, f(value)))

## Remove a key-value pair from a map.
## If the key is not found, no changes are made.
##
## @since 0.1.0
##
## ```
## ➢ Map.remove(Map.from_list([(1, "one"), (2, "two")]), 1)
## {2: "two"} : Map(Int, String)
## ```
let remove(map : Map(comparable, v), key : comparable) -> Map(comparable, v) =
    match map on
    | Map(tree) => Map(TM.remove(tree, key))

## Determine the number of key-value pairs in a map.
##
## @since 0.1.0
##
## ```
## ➢ Map.size(Map.from_list([(1, "one"), (2, "two")]))
## 2 : Int
## ```
let size(map : Map(k, v)) -> Int =
    match map on
    | Map(tree) => TM.size(tree)

## Convert a map into a list of key-value pairs, sorted by key.
##
## @since 0.1.0
##
## ```
## ➢ Map.to_list(Map.from_list([(2, "two"), (1, "one")]))
## [(1, "one"), (2, "two")] : List((Int, String))
## ```
let to_list(map : Map(k, v)) -> List((k, v)) =
    match map on
    | Map(tree) => TM.to_list(tree)

## Convert a list of key-value pairs into a map.
## If there are duplicate keys, later values overwrite earlier ones.
##
## @since 0.1.0
##
## ```
## ➢ Map.from_list([(1, "one"), (2, "two"), (1, "ONE")])
## {1: "ONE", 2: "two"} : Map(Int, String)
## ```
let from_list(list : List((comparable, v))) -> Map(comparable, v) =
    Map(TM.from_list(list))

## Get a list of all keys in a map, sorted.
##
## @since 0.1.0
##
## ```
## ➢ Map.keys(Map.from_list([(1, "one"), (2, "two")]))
## [1, 2] : List(Int)
## ```
let keys(map : Map(k, v)) -> List(k) =
    match map on
    | Map(tree) => TM.keys(tree)

## Get a list of all values in a map, in key order.
##
## @since 0.1.0
##
## ```
## ➢ Map.values(Map.from_list([(1, "one"), (2, "two")]))
## ["one", "two"] : List(String)
## ```
let values(map : Map(k, v)) -> List(v) =
    match map on
    | Map(tree) => TM.values(tree)

## Combine two maps, favoring values from the second map when keys overlap.
##
## @since 0.1.0
##
## ```
## ➢ Map.union(Map.from_list([(1, "one"), (2, "two")]), Map.from_list([(2, "TWO"), (3, "three")]))
## {1: "one", 2: "TWO", 3: "three"} : Map(Int, String)
## ```
let union(map1 : Map(comparable, v), map2 : Map(comparable, v)) -> Map(comparable, v) =
    match (map1, map2) on
    | (Map(tree1), Map(tree2)) => Map(TM.union(tree1, tree2))

## Keep only key-value pairs where the key exists in both maps.
## Values are taken from the first map.
##
## @since 0.1.0
##
## ```
## ➢ Map.intersect(Map.from_list([(1, "one"), (2, "two")]), Map.from_list([(2, "TWO"), (3, "three")]))
## {2: "two"} : Map(Int, String)
## ```
let intersect(map1 : Map(comparable, v), map2 : Map(comparable, v)) -> Map(comparable, v) =
    match (map1, map2) on
    | (Map(tree1), Map(tree2)) => Map(TM.intersect(tree1, tree2))

## Keep only key-value pairs where the key exists in the first map but not the second.
##
## @since 0.1.0
##
## ```
## ➢ Map.diff(Map.from_list([(1, "one"), (2, "two")]), Map.from_list([(2, "TWO"), (3, "three")]))
## {1: "one"} : Map(Int, String)
## ```
let diff(map1 : Map(comparable, v), map2 : Map(comparable, v)) -> Map(comparable, v) =
    match (map1, map2) on
    | (Map(tree1), Map(tree2)) => Map(TM.diff(tree1, tree2))

## Fold over the key-value pairs in a map, in key order from lowest to highest.
##
## @since 0.1.0
##
## ```
## ➢ Map.fold_left(Map.from_list([(1, "one"), (2, "two")]), fn(k, v, acc) => acc ++ v, "")
## "onetwo" : String
## ```
let fold_left(map : Map(k, v), f : (k, v, acc -> acc), init : acc) -> acc =
    match map on
    | Map(tree) => TM.fold_left(tree, f, init)

## Fold over the key-value pairs in a map, in key order from highest to lowest.
##
## @since 0.1.0
##
## ```
## ➢ Map.fold_right(Map.from_list([(1, "one"), (2, "two")]), fn(k, v, acc) => acc ++ v, "")
## "twoone" : String
## ```
let fold_right(map : Map(k, v), f : (k, v, acc -> acc), init : acc) -> acc =
    match map on
    | Map(tree) => TM.fold_right(tree, f, init)

## Transform values in a map.
##
## @since 0.1.0
##
## ```
## ➢ Map.map(Map.from_list([(1, "one"), (2, "two")]), fn(k, v) => String.to_upper(v))
## {1: "ONE", 2: "TWO"} : Map(Int, String)
## ```
let map(map : Map(k, v), f : (k, v -> v2)) -> Map(k, v2) =
    match map on
    | Map(tree) => Map(TM.map(tree, f))

## Keep only key-value pairs that satisfy the given predicate.
##
## @since 0.1.0
##
## ```
## ➢ Map.keep(Map.from_list([(1, "one"), (2, "two")]), fn(k, v) => mod(k, 2) == 0)
## {2: "two"} : Map(Int, String)
## ```
let keep(map : Map(comparable, v), pred : (comparable, v -> Bool)) -> Map(comparable, v) =
    match map on
    | Map(tree) => Map(TM.keep(tree, pred))

## Remove key-value pairs that satisfy the given predicate.
##
## @since 0.1.0
##
## ```
## ➢ Map.reject(Map.from_list([(1, "one"), (2, "two")]), fn(k, v) => mod(k, 2) == 0)
## {1: "one"} : Map(Int, String)
## ```
let reject(map : Map(comparable, v), pred : (comparable, v -> Bool)) -> Map(comparable, v) =
    match map on
    | Map(tree) => Map(TM.reject(tree, pred))

## Create two new maps. The first contains all key-value pairs that passed the
## given test, and the second contains all key-value pairs that did not.
##
## @since 0.1.0
##
## ```
## ➢ Map.partition(Map.from_list([(1, "one"), (2, "two")]), fn(k, v) => mod(k, 2) == 0)
## ({2: "two"}, {1: "one"}) : (Map(Int, String), Map(Int, String))
## ```
let partition(map : Map(comparable, v), pred : (comparable, v -> Bool)) -> (Map(comparable, v), Map(comparable, v)) =
    match map on
    | Map(tree) =>
        let (passed, failed) = TM.partition(tree, pred)
        (Map(passed), Map(failed))
