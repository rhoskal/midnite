module Tuple exposing
    ( Tuple(..)
    , fst
    , map_both
    , map_first
    , map_second
    , pair
    , snd
    )

# CREATE

let pair(x : a, y : b) -> (a, b) =
    (x, y)

# ACCESS

let fst(x : a, _ : b) -> a =
    x

let snd(_ : a, y: b) -> a =
    y

# TRANSFORM

let map_both(pair : (a, b), f : (a -> x), g : (b -> y)) -> (x, y) =
    match pair on
    | (x, y) => (f(x), g(y))

let map_first(pair : (a, b), f : (a -> x)) -> (x, b) =
    match pair on
    | (x, y) => (f(x), y)

let map_second(pair : (a, b), f : (b -> y)) -> (a, y) =
    match pair on
    | (x, y) => (x, f(y))
