module Tuple exposing
    ( fst
    , map_both
    , map_first
    , map_second
    , pair
    , snd
    )

## Creates a tuple pair from two values.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.pair 1 "a"
## (1, "a") : (Int, String)
## ```
let pair (x : a) (y : b) : (a, b) =
    (x, y)

## Gets the first value from a tuple.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.fst (1, "a")
## 1 : Int
## ```
let fst (x : a) (_ : b) : a =
    x

## Gets the second value from a tuple.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.snd (1, "a")
## "a" : String
## ```
let snd (_ : a) (y : b) : b =
    y

## Applies functions to both elements of a tuple.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.map_both String.from_int String.to_upper (1, "a")
## ("1", "A") : (String, String)
## ```
let map_both (f : a -> x) (g : b -> y) (pair : (a, b)) : (x, y) =
    match pair on
    | (x, y) => (f x, g y)

## Applies a function to the first element of a tuple.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.map_first String.from_int (1, "a")
## ("1", "a") : (String, String)
## ```
let map_first (f : a -> x) (pair : (a, b)) : (x, b) =
    match pair on
    | (x, y) => (f x, y)

## Applies a function to the second element of a tuple.
##
## @since 0.1.0
##
## ```
## ➢ Tuple.map_second String.to_upper (1, "a")
## (1, "A") : (Int, String)
## ```
let map_second (f : b -> y) (pair : (a, b)) : (a, y) =
    match pair on
    | (x, y) => (x, f y)
