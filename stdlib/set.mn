module Set exposing
    ( Set
    , diff
    , empty
    , empty?
    , fold_left
    , fold_right
    , from_list
    , insert
    , intersect
    , keep
    , map
    , member?
    , partition
    , reject
    , remove
    , singleton
    , size
    , subset?
    , superset?
    , to_list
    , union
    )

open TreeMap as TM
open Unit using (Unit)

## A collection of unique values with guaranteed ordering.
## Operations like insert, remove, and lookup have O(log n) complexity.
##
## @since 0.1.0
type alias Set(a) =
    Set(TM.TreeMap(a, Unit)))

## Create an empty set.
##
## @since 0.1.0
##
## ```
## ➢ Set.empty()
## {} : Set(a)
## ```
let empty() -> Set(a) =
    Set(TM.empty())

## Determine if a set is empty.
##
## @since 0.1.0
##
## ```
## ➢ Set.empty?(Set.empty())
## True : Bool
##
## ➢ Set.empty?(Set.singleton(1))
## False : Bool
## ```
let empty?(set : Set(a)) -> Bool =
    match set on
    | Set(map) => TM.empty?(map)

## Create a set with one value.
##
## @since 0.1.0
##
## ```
## ➢ Set.singleton(42)
## {42} : Set(Int)
## ```
let singleton(value : comparable) -> Set(comparable) =
    Set(TM.singleton(value, Unit))

## Insert a value into a set.
##
## @since 0.1.0
##
## ```
## ➢ Set.insert(Set.singleton(1), 2)
## {1, 2} : Set(Int)
##
## ➢ Set.insert(Set.singleton(1), 1)
## {1} : Set(Int)
## ```
let insert(set : Set(comparable), value : comparable) -> Set(comparable) =
    match set on
    | Set(map) => Set(TM.insert(map, value, Unit))

## Remove a value from a set. If the value is not found, no changes are made.
##
## @since 0.1.0
##
## ```
## ➢ Set.remove(Set.from_list([1, 2, 3]), 2)
## {1, 3} : Set(Int)
## ```
let remove(set : Set(comparable), value : comparable) -> Set(comparable) =
    match set on
    | Set(map) => Set(TM.remove(map, value))

## Determine if a value is in a set.
##
## @since 0.1.0
##
## ```
## ➢ Set.member?(Set.from_list([1, 2, 3]), 2)
## True : Bool
##
## ➢ Set.member?(Set.from_list([1, 2, 3]), 4)
## False : Bool
## ```
let member?(set : Set(comparable), value : comparable) -> Bool =
    match set on
    | Set(map) =>
        match TM.get(map, value) on
        | None => False
        | Some(_) => True

## Determine the number of elements in a set.
##
## @since 0.1.0
##
## ```
## ➢ Set.size(Set.from_list([1, 2, 3]))
## 3 : Int
## ```
let size(set : Set(a)) -> Int =
    match set on
    | Set(map) => TM.size(map)

## Get the union of two sets. Keep all values.
##
## @since 0.1.0
##
## ```
## ➢ Set.union(Set.from_list([1, 2]), Set.from_list([2, 3]))
## {1, 2, 3} : Set(Int)
## ```
let union(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
    match (set1, set2) on
    | (Set(map1), Set(map2)) => Set(TM.union(map1, map2))

## Get the intersection of two sets. Keeps values that appear in both sets.
##
## @since 0.1.0
##
## ```
## ➢ Set.intersect(Set.from_list([1, 2]), Set.from_list([2, 3]))
## {2} : Set(Int)
## ```
let intersect(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
    match (set1, set2) on
    | (Set(map1), Set(map2)) => Set(TM.intersect(map1, map2))

## Get the difference between the first set and the second. Keeps values
## that do not appear in the second set.
##
## @since 0.1.0
##
## ```
## ➢ Set.diff(Set.from_list([1, 2, 3]), Set.from_list([2, 3, 4]))
## {1} : Set(Int)
## ```
let diff(set1 : Set(comparable), set2 : Set(comparable)) -> Set(comparable) =
    match (set1, set2) on
    | (Set(map1), Set(map2)) => Set(TM.diff(map1, map2))

## Determine if the first set is a subset of the second set.
##
## @since 0.1.0
##
## ```
## ➢ Set.subset?(Set.from_list([1, 2]), Set.from_list([1, 2, 3]))
## True : Bool
##
## ➢ Set.subset?(Set.from_list([1, 4]), Set.from_list([1, 2, 3]))
## False : Bool
## ```
let subset?(set1 : Set(comparable), set2 : Set(comparable)) -> Bool =
    match (set1, set2) on
    | (Set(map1), Set(map2)) =>
        let keys1 = TM.keys(map1)
        List.all?(keys1, fn(key) =>
            match TM.get(map2, key) on
            | None => False
            | Some(_) => True
        )

## Determine if the first set is a superset of the second set.
##
## @since 0.1.0
##
## ```
## ➢ Set.superset?(Set.from_list([1, 2, 3]), Set.from_list([1, 2]))
## True : Bool
##
## ➢ Set.superset?(Set.from_list([1, 2, 3]), Set.from_list([1, 4]))
## False : Bool
## ```
let superset?(set1 : Set(comparable), set2 : Set(comparable)) -> Bool =
    subset?(set2, set1)

## Determine if two sets have no elements in common.
##
## @since 0.1.0
##
## ```
## ➢ Set.disjoint?(Set.from_list([1, 2]), Set.from_list([3, 4]))
## True : Bool
##
## ➢ Set.disjoint?(Set.from_list([1, 2]), Set.from_list([2, 3]))
## False : Bool
## ```
let disjoint?(set1 : Set(comparable), set2 : Set(comparable)) -> Bool =
    match (set1, set2) on
    | (Set(map1), Set(map2)) =>
        let keys1 = TM.keys(map1)

        List.all?(keys1, fn(key) =>
            match TM.get(map2, key) on
            | None => True
            | Some(_) => False
        )

## Convert a set into a list, sorted from lowest to highest.
##
## @since 0.1.0
##
## ```
## ➢ Set.to_list(Set.from_list([3, 1, 2]))
## [1, 2, 3] : List(Int)
## ```
let to_list(set : Set(a)) -> List(a) =
    match set on
    | Set(map) => TM.keys(map)

## Convert a list into a set, removing any duplicates.
##
## @since 0.1.0
##
## ```
## ➢ Set.from_list([1, 2, 1, 3, 2])
## {1, 2, 3} : Set(Int)
## ```
let from_list(list : List(comparable)) -> Set(comparable) =
    List.fold_left(
        list,
        empty(),
        fn(acc, value) => insert(acc, value)
    )

## Fold over the values in a set, in order from lowest to highest.
##
## @since 0.1.0
##
## ```
## ➢ Set.fold_left(Set.from_list([1, 2, 3]), fn(x, acc) => acc + x, 0)
## 6 : Int
## ```
let fold_left(set : Set(a), f : (a, b -> b), init : b) -> b =
    match set on
    | Set(map) => TM.fold_left(map, fn(k, _, acc) => f(k, acc), init)

## Fold over the values in a set, in order from highest to lowest.
##
## @since 0.1.0
##
## ```
## ➢ Set.fold_right(Set.from_list([1, 2, 3]), fn(x, acc) => acc + x, 0)
## 6 : Int
## ```
let fold_right(set : Set(a), f : (a, b -> b), init : b) -> b =
    match set on
    | Set(map) => TM.fold_right(map, fn(k, _, acc) => f(k, acc), init)

## Map a function onto a set, creating a new set with no duplicates.
##
## @since 0.1.0
##
## ```
## ➢ Set.map(Set.from_list([1, 2, 3]), fn(x) => x * 2)
## {2, 4, 6} : Set(Int)
##
## ➢ Set.map(Set.from_list([1, 2, 3, 4]), fn(x) => mod(x, 2))
## {0, 1} : Set(Int)
## ```
let map(set : Set(comparable), f : (comparable -> comparable2)) -> Set(comparable2) =
    match set on
    | Set(map) =>
        fold_left(
            set,
            fn(value, acc) => insert(acc, f(value)),
            empty()
        )

## Only keep elements that satisfy the given predicate.
##
## @since 0.1.0
##
## ```
## ➢ Set.keep(Set.from_list([1, 2, 3, 4]), fn(x) => mod(x, 2) == 0)
## {2, 4} : Set(Int)
## ```
let keep(set : Set(comparable), pred : (comparable -> Bool)) -> Set(comparable) =
    match set on
    | Set(map) => Set(TM.keep(map, fn(k, _) => pred(k)))

## Returns a set by excluding the elements which satisfy the given predicate.
##
## @since 0.1.0
##
## ```
## ➢ Set.reject(Set.from_list([1, 2, 3, 4]), fn(x) => mod(x, 2) == 0)
## {1, 3} : Set(Int)
## ```
let reject(set : Set(comparable), pred : (comparable -> Bool)) -> Set(comparable) =
    match set on
    | Set(map) => Set(TM.reject(map, fn(k, _) => pred(k)))

## Create two new sets. The first contains all the elements that passed the
## given test, and the second contains all the elements that did not.
##
## @since 0.1.0
##
## ```
## ➢ Set.partition(Set.from_list([1, 2, 3, 4]), fn(x) => mod(x, 2) == 0)
## ({2, 4}, {1, 3}) : (Set(Int), Set(Int))
## ```
let partition(set : Set(comparable), pred : (comparable -> Bool)) -> (Set(comparable), Set(comparable)) =
    match set on
    | Set(map) =>
        let (passed, failed) = TM.partition(map, fn(k, _) => pred(k))
        (Set(passed), Set(failed))
